1. What is Matplotlib?

   - Matplotlib is a low level graph plotting library in python that serves as a visualization utility.

   - Matplotlib was created by John D. Hunter.

   - Matplotlib is open source and we can use it freely.


2. Installation of Matplotlib

    (i) - If you have Python and PIP already installed on your system

        - Install Matplotlib using this command: C:\Users\Your Name>pip install matplotlib

   (ii) - If the above command fails, then use a python distribution that already has Matplotlib installed,  like Anaconda, Spyder.



3. Import Matplotlib

   Once Matplotlib is installed, import it in your applications by adding the import module statement:  import matplotlib


4. Check Matplotlib Version

  Command: import matplotlib

           print(matplotlib.__version__)


5. The basic steps to creating plots with matplotlib are:

                        (i)   Prepare Data
                        (ii)  Create Plot
                        (iii) Plot
                        (iv)  Customized Plot
                        (v)   Save Plot                       
                        (vi)  Show Plot


6. Pyplot

   Most of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias:
   
   Command:  import matplotlib.pyplot as plt

    Now the Pyplot package can be referred to as plt.

    Example: Draw a line in a diagram from position (1, 3) to position (8, 10):

     Code:   
             import matplotlib.pyplot as plt
             import numpy as np

             xpoints = np.array([1, 8])
             ypoints = np.array([3, 10])

             plt.plot(xpoints, ypoints)
             plt.show()

             Type the above piece of code in your googlecolab Notebook and see the result.


7. Matplotlib Markers
 
   You can use the keyword argument marker to emphasize each point with a specified marker:

   Example:(i) Mark each point with a circle

   Code:

        import matplotlib.pyplot as plt
        import numpy as np

        ypoints = np.array([3, 8, 1, 10])

        plt.plot(ypoints, marker = 'o')
        plt.show()

Type the above piece of code in your googlecolab Notebook and see the result.

    Example: (ii) Mark each point with a '+'

             Code:
                                 ...
                    plt.plot(ypoints, marker = '+')
                                 ...

    Example: (iii) Marker Size
                   You can use the keyword argument markersize or the shorter version, ms to set the size of the markers:

                   Set the size of the markers to 20:

              Code: 
          
                  import matplotlib.pyplot as plt
                  import numpy as np

                  ypoints = np.array([3, 8, 1, 10])

                  plt.plot(ypoints, marker = 'o', ms = 20)
                  plt.show()

    Example: (iv) Marker Colour

                  (a) You can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers:

                      Set the EDGE color to red:

              Code: 

                   import matplotlib.pyplot as plt
                   import numpy as np

                   ypoints = np.array([3, 8, 1, 10])

                   plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')
                   plt.show()

               (b) You can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers:

                    Set the FACE color to red:

                 Code: 
                
                        import matplotlib.pyplot as plt
                        import numpy as np

                        ypoints = np.array([3, 8, 1, 10])

                        plt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')
                        plt.show() 


                (c) Use both the mec and mfc arguments to color the entire marker.

                     Set the color of both the edge and the face to red:

                 Code:
                       import matplotlib.pyplot as plt
                       import numpy as np

                       ypoints = np.array([3, 8, 1, 10])

                       plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')
                       plt.show()
                       
   
8. Matplotlib Line

   (i) Linestyle
       
      You can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line:
      
       (a) Use a dotted line:
           
              Code:
                 import matplotlib.pyplot as plt
                 import numpy as np

                 ypoints = np.array([3, 8, 1, 10])

                 plt.plot(ypoints, linestyle = 'dotted')
                 plt.show()

       (b) Use a dashed line:


               plt.plot(ypoints, linestyle = 'dashed')

    (ii) Line Color

         You can use the keyword argument color or the shorter c to set the color of the line:

         (a) Set the line color to red:
         
            Code:

                  import matplotlib.pyplot as plt
                  import numpy as np

                  ypoints = np.array([3, 8, 1, 10])

                  plt.plot(ypoints, color = 'r')
                  plt.show()

    (iii) Line Width

          You can use the keyword argument linewidth or the shorter lw to change the width of the line.

          The value is a floating number, in points:

          Example: Plot with a 20.5pt wide line

      Code:

            import matplotlib.pyplot as plt
            import numpy as np

            ypoints = np.array([3, 8, 1, 10])

           plt.plot(ypoints, linewidth = '20.5')
           plt.show()

      (iv) Multiple Lines

           You can plot as many lines as you like by simply adding more plt.plot() functions:

          Example: Draw two lines by specifying a plt.plot() function for each line:

          Code:

                  import matplotlib.pyplot as plt
                  import numpy as np

                  y1 = np.array([3, 8, 1, 10])
                  y2 = np.array([6, 2, 7, 11])

                  plt.plot(y1)
                  plt.plot(y2)

                  plt.show()

      (v) You can also plot many lines by adding the points for the x- and y-axis for each line in the same plt.plot() function.

          (In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).)

          The x- and y- values come in pairs:

         Example: Draw two lines by specifiyng the x- and y-point values for both lines

         Code:

                   import matplotlib.pyplot as plt
                   import numpy as np

                   x1 = np.array([0, 1, 2, 3])
                   y1 = np.array([3, 8, 1, 10])
                   x2 = np.array([0, 1, 2, 3])
                   y2 = np.array([6, 2, 7, 11])

                  plt.plot(x1, y1, x2, y2)
                  plt.show()


9. Matplotlib Labels and Title

   (i) Create Labels for a Plot
       With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.

       Example: Add labels to the x- and y-axis

       Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.plot(x, y)

plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.show()


   (ii) Create a Title for a Plot
        With Pyplot, you can use the title() function to set a title for the plot.

       Example: Add a plot title and labels for the x- and y-axis

       Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.plot(x, y)

plt.title("Human Body Analysis")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.show()

     (iii) Set Font Properties for Title and Labels

           You can use the fontdict parameter in xlabel(), ylabel(), and title() to set font properties for the title and labels.

           Example: Set font properties for the title and labels

          Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}

plt.title("Human Body Analysis", fontdict = font1)
plt.xlabel("Average Pulse", fontdict = font2)
plt.ylabel("Calorie Burnage", fontdict = font2)

plt.plot(x, y)
plt.show()

    (iv) Position the Title
         
         You can use the loc parameter in title() to position the title.

         Legal values are: 'left', 'right', and 'center'. Default value is 'center'.

        Example: Position the title to the left

      Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Human Body Analysis", loc = 'left')
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.plot(x, y)
plt.show()



10. Matplotlib Adding Grid Lines

  (i) Add Grid Lines to a Plot

      With Pyplot, you can use the grid() function to add grid lines to the plot.

      Example: Add grid lines to the plot

     Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Human Body Analysis")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.plot(x, y)

plt.grid()

plt.show()

        (ii) Specify Which Grid Lines to Display

             You can use the axis parameter in the grid() function to specify which grid lines to display.

            Legal values are: 'x', 'y', and 'both'. Default value is 'both'.

            Example: Display only grid lines for the x-axis

         Code:

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Human Body Analysis")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.plot(x, y)

plt.grid(axis = 'x') or plt.grid(axis = 'y') // to display grid lines for y-axis

plt.show()


      (iii) Set Line Properties for the Grid

            You can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number).

            Example: Set the line properties of the grid

 Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Human Body Analysis")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")

plt.plot(x, y)

plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)

plt.show()



11. Matplotlib Subplot

   (i) Display Multiple Plots

       With the subplot() function you can draw multiple plots in one figure:

       Example: Draw 2 plots

      Code:

        import matplotlib.pyplot as plt
        import numpy as np

        #plot 1:
        x = np.array([0, 1, 2, 3])
        y = np.array([3, 8, 1, 10])

       plt.subplot(1, 2, 1)
       plt.plot(x,y)

       #plot 2:
       x = np.array([0, 1, 2, 3])
       y = np.array([10, 20, 30, 40])

      plt.subplot(1, 2, 2)
      plt.plot(x,y)

      plt.show()

   
    (ii) The subplot() Function

           The subplot() function takes three arguments that describes the layout of the figure.

           The layout is organized in rows and columns, which are represented by the first and second argument.

           The third argument represents the index of the current plot.

           plt.subplot(1, 2, 1)
           #the figure has 1 row, 2 columns, and this plot is the first plot.

           plt.subplot(1, 2, 2)
           #the figure has 1 row, 2 columns, and this plot is the second plot.

         So, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side), we can write the syntax like this:

        Example: Draw 2 plots on top of each other
 
   Code:

import matplotlib.pyplot as plt
import numpy as np

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 1, 1)
plt.plot(x,y)

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 1, 2)
plt.plot(x,y)

plt.show()

      
       (ii)  You can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot.

            Example: Draw 6 plots

         Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 1)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 2)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 3)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 4)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(2, 3, 5)
plt.plot(x,y)

x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(2, 3, 6)
plt.plot(x,y)

plt.show()


       (iii) Title

             You can add a title to each plot with the title() function:

             Example: 2 plots, with titles

Code:

import matplotlib.pyplot as plt
import numpy as np

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")

plt.show()


       (iv) Super Title

            You can add a title to the entire figure with the suptitle() function:

           Example: Add a title for the entire figure

          Code:

import matplotlib.pyplot as plt
import numpy as np

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")

plt.suptitle("MY SHOP")
plt.show()



12. Matplotlib Scatter

   (i) Creating Scatter Plots

       With Pyplot, you can use the scatter() function to draw a scatter plot.

      The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis

      Example: A simple scatter plot

      Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])

plt.scatter(x, y)
plt.show()

     Observations: The observation in the example above is the result of 13 cars passing by.

               1. The X-axis shows how old the car is.

               2. The Y-axis shows the speed of the car when it passes.

             Are there any relationships between the observations?

               1. It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.

  (ii) Compare Plots

       In the example above, there seems to be a relationship between speed and age, but what if we plot the observations from another day as well? Will the scatter plot tell us something else?

       Example: Draw two plots on the same figure

       Code: 

import matplotlib.pyplot as plt
import numpy as np

#day one, the age and speed of 13 cars:
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y)

#day two, the age and speed of 15 cars:
x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
plt.scatter(x, y)

plt.show()

   (iii) Colors

         (a) You can set your own color for each scatter plot with the color or the c argument:

             Example: Set your own color of the markers
Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y, color = 'hotpink')

x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
plt.scatter(x, y, color = '#88c999')

plt.show()

           (b) Color Each Dot

               You can even set a specific color for each dot by using an array of colors as value for the c argument
               
               Example: Set your own color of the markers
          Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
colors = np.array(["red","green","blue","yellow","pink","black","orange","purple","beige","brown","gray","cyan","magenta"])

plt.scatter(x, y, c=colors)

plt.show()


13. Matplotlib Bars

    (i) Creating Bars

        With Pyplot, you can use the bar() function to draw bar graphs

        Example: Draw 4 bars

 Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.bar(x,y)
plt.show()

   (ii) Horizontal Bars
        
        If you want the bars to be displayed horizontally instead of vertically, use the barh() function:

        Example: Draw 4 horizontal bars

  Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.barh(x, y)
plt.show()

   (iii) Bar Color

         The bar() and barh() take the keyword argument color to set the color of the bars:

         Example: Draw 4 red bars

     Code:


import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.bar(x, y, color = "red")
plt.show()

   (iv) Bar Width

        The bar() takes the keyword argument width to set the width of the bars:

        Example: Draw 4 very thin bars

        Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.bar(x, y, width = 0.1)
plt.show()

   (v) Bar Height

       The barh() takes the keyword argument height to set the height of the bars:

       Example: Draw 4 very thin bars

   Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.barh(x, y, height = 0.1)
plt.show()



14. Matplotlib Histograms
    
    A histogram is a graph showing frequency distributions.

   It is a graph showing the number of observations within each given interval.

   (i) Create Histogram

       In Matplotlib, we use the hist() function to create histograms.

       The hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument.

       Example: A simple histogram

    Code:

import matplotlib.pyplot as plt
import numpy as np

x = np.random.normal(170, 10, 250)

plt.hist(x)
plt.show() 



15. Matplotlib Pie Charts

    (i) Creating Pie Charts

        With Pyplot, you can use the pie() function to draw pie charts:

       Example:A simple pie chart

     Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])

plt.pie(y)
plt.show() 

Observation: As you can see the pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]).

             By default the plotting of the first wedge starts from the x-axis and moves counterclockwise.




   (ii) Labels

        Add labels to the pie chart with the label parameter.

        The label parameter must be an array with one label for each wedge:

        Example: A simple pie chart

 Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels)
plt.show() 


   (iii) Explode

         Maybe you want one of the wedges to stand out? The explode parameter allows you to do that.

         The explode parameter, if specified, and not None, must be an array with one value for each wedge.

         Each value represents how far from the center each wedge is displayed.


         Example: Pull the "Apples" wedge 0.2 from the center of the pie.

    Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]

plt.pie(y, labels = mylabels, explode = myexplode)
plt.show() 

    
   (iv) Shadow

        Add a shadow to the pie chart by setting the shadows parameter to True.

        Example: Add a shadow

   Code:


import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]

plt.pie(y, labels = mylabels, explode = myexplode, shadow = True)
plt.show()

   
    (v) Colors

        You can set the color of each wedge with the colors parameter.

        The colors parameter, if specified, must be an array with one value for each wedge.

        Example: Specify a new color for each wedge.

   Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
mycolors = ["black", "hotpink", "b", "#4CAF50"]

plt.pie(y, labels = mylabels, colors = mycolors)
plt.show() 


   (vi) Legend

       To add a list of explanation for each wedge, use the legend() function:

       Example: Add a legend.

       Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels)
plt.legend()
plt.show() 


   (vii) Legend With Header

         To add a header to the legend, add the title parameter to the legend function.

         Example: Add a legend with a header.

      Code:

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels)
plt.legend(title = "Four Fruits:")
plt.show() 




16. Creation of QQ-Plot

    When the quantiles of two variables are plotted against each other, then the plot obtained is known as quantile – quantile plot or qqplot. 
    This plot provides a summary of whether the distributions of two variables are similar or not with respect to the locations.


   Sample Souce Code:

import numpy as np
import statsmodels.api as sm
import pylab as py
  
# np.random generates different random numbers
# whenever the code is executed
# Note: When you execute the same code 
  
# Random data points generated
data_points = np.random.normal(0, 1, 100)    
  
sm.qqplot(data_points, line ='45')
py.show()



17. Creation of Box Plot

    Example 1: We will create the random data set of the numpy array and create the box plot.

 Code:

import matplotlib.pyplot as plt  
import numpy as np  
np.random.seed(15)  
dataSet = np.random.normal(100, 25, 200)  
print(dataSet)  
figure = plt.figure(figsize =(10, 8))  
plt.boxplot(dataSet)  
plt.show()  


     Example2: We can create multiple box plots simultaneously in the same file.


Code:

import matplotlib.pyplot as plt  
import numpy as np  
  
np.random.seed(10)  
  
dataSet1 = np.random.normal(100, 10, 220)  
dataSet2 = np.random.normal(80, 20, 200)  
dataSet3 = np.random.normal(60, 35, 220)  
dataSet4 = np.random.normal(50, 40, 200)  
dataSet = [dataSet1, dataSet2, dataSet3, dataSet4]  
  
figure = plt.figure(figsize =(10, 7))  
ax = figure.add_axes([0, 0, 1, 1])  
bp = ax.boxplot(dataSet)  
plt.show()  




18. Python code for plotting trigonometric functions


import matplotlib.pyplot as plt
import numpy as np

# Data for plotting
t = np.arange(0.0, 24, 0.01)

# Sine Plot
s = np.sin(t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel='radians', ylabel='Sin(x)',
       title='Sine Plot')
ax.grid()
plt.show()

# Cosine Plot
s = np.cos(t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel='radians', ylabel='(cosx)',
       title='Cosine Plot')
ax.grid()
plt.show()

# Tangent Plot
t = np.arange(0.0, 1, 0.01)
s = np.tan(t)
fig, ax = plt.subplots()
ax.plot(t, s)
ax.set(xlabel='radians', ylabel='tan(x)',
       title='Tangent Plot')
ax.grid()
plt.show()